---
title: "Structural Bioinformatics (pt2)"
author: "Irene Hsieh (A16197563)"
format: pdf
---
 AlphaFold has changed the game for protein structure prediction and allows 
 anyone with sufficient bioinformatics skills to predict the structure of 
 virtually any protein.
 
 
 In particular we used their AlphaFold2_mmseqs2 version that uses mmseq2 rather than HMMMer for sequence search 
 
 The main outputs include a set of *PDB structure file* along with matching 
 **JSON format files** that tell us how good the resulting models might be 
 
 Lets start by loading these structures up in Mol*
 
```{r}
library(bio3d)
# Change this for YOUR results dir name
results_dir <- "hivpr1dimer_23119/" 
# File names for all PDB models
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)

# Print our PDB file names
basename(pdb_files)
```
 
 
```{r}
# Read all data from Models 
#  and superpose/fit coords
pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")

pdbs
```
 
```{r}
rd <- rmsd(pdbs, fit=T)
range(rd)
```
 
```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```
 
```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```
 
```{r}
plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```
```{r}
core <- core.find(pdbs)
core.inds <- print(core, vol=0.5)
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```
 
```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```
 
 If the predicted model has more than one domain, each domain may have high 
 confidence, yet the relative positions of the domains may not. The estimated
 reliability of relative domain positions is in graphs of predicted aligned 
 error. (PAE) Which are included in the download zip file and analyzed in 
 R above. 
 
 ##Predicted Alignment Error for domains
 
```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```
```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```
 
```{r}
pae1$max_pae
pae5$max_pae
```
 
 For model 1: 
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```
 
 For model 5: 
 
```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```
 
 Make model 1 With the same z range of model 5: 
 
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```
 
 #Residue conservation from alignment file 
 
```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```
 
```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```
 
 How many sequences are in this alignment
 
```{r}
dim(aln$ali)
```
 
 Score residue conservation in the alignment 
 
```{r}
sim <- conserv(aln)
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```
 
 Note the conserved Active Site residues D25, T26, G27, A28. These positions will stand out if we generate a consensus sequence with a high cutoff value
 
```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

 final visualization of these functionally important sites we can map this conservation score to the Occupancy column of a PDB file for viewing in molecular viewer programs such as Mol*, PyMol, VMD, chimera etc.
  
  
```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```
 
