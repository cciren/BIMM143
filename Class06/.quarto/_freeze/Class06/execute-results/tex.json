{
  "hash": "38f1014661ec427cba194f9ea8a56e68",
  "result": {
    "markdown": "---\ntitle: \"Class06: R Functions\"\nauthor : \"Irene (PID: A16197563)\"\ndate: 01/25/2024\nformat: pdf\n\n---\n\n\n## R functions\n\nFunctions are how we get stuff done. We call functions to do everything useful in R.\n\nOne cool thing about R is that it makes writing your own functions comparatively easy.\n\nAll functions in R have at least three things:\n\n- A **name** (we get to pick this)\n- One or more **input arguments** (the input to our function)\n- The **body** (lines of code that do the work)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunname <- function(input1, input2){\n  # The body with R code \n  \n}\n```\n:::\n\n\nLet's write a silly first function to add two numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5\ny <- 1\nx+y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naddme <- function(x,y=1){\n  x+y\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naddme(1,1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naddme(100,100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naddme(10,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n\n## Lab for today\n\nWrite a function to grade student work from class\n\nStart with a simplified version of the problem: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example input vectors to start with\n\nstudent1 <- c(100, 100, 100, 100, 100, 100, 100, 90)\nstudent2 <- c(100, NA, 90, 90, 90, 90, 97, 80)\nstudent3 <- c(90, NA, NA, NA, NA, NA, NA, NA)\n```\n:::\n\n\nLet's just find the average.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98.75\n```\n:::\n\n```{.r .cell-code}\nmean(student2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n\n```{.r .cell-code}\nmean(student3, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\nThis is not fair - there is no way student3 should have mean of 90!\n\nCome back to this NA problem. But things worked for `student1`\n\nWe want to drop the lowest score before getting the `mean()`\n\nHow do I find the lowest (minimum) score?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\nI found the `which.min()` function. Maybe this is more useful?\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.min(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nCool- it is the 8th element of the vector that has the lowest score. Can I remove this one? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent1[which.min(student1)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\n\nWe can use the wee minus trick for indexing.\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:5\nx[-3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4 5\n```\n:::\n:::\n\n\nNow put these bits of knowledge together to make some code that identifies and drops the lowest score (element of the input vector) and then calculate the mean\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1[-which.min(student1)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nor (exactly the same code)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find the lowest score\nind <- which.min(student1)\n# Remove lowest score and find the mean\nmean(student1[-ind])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nUse a common shortcut and use `x` as my input \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- student1 \nmean (x[-which.min(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nWe still have the problem of missing values. \n\nOne idea is to replace NA values with zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 1:5\ny [y == 3] <- 10000\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]     1     2 10000     4     5\n```\n:::\n:::\n\n\nBummer, this is no good...\n\n::: {.cell}\n\n```{.r .cell-code}\ny<- c(1, 2,NA, 4, 5)\ny== NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA NA NA NA NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2 NA  4  5\n```\n:::\n\n```{.r .cell-code}\nis.na(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\nHow can I remove the NA element from the vector?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!c(F,F,F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\n#y[is.na(y)]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny[!is.na(y)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny[is.na(y)] <- 10000\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]     1     2 10000     4     5\n```\n:::\n:::\n\n\nOk lets solve this: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- student3\n\n#Change NA values to Zero\nx[is.na(x)] <- 0\n#Find and remove min value and get mean \nmean(x[-which.min(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n\nLast step now that I have my working code snippet is to make my `grade()` function \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade <- function (x){\n  x[is.na(x)] <- 0\n  mean(x[-which.min(x)])\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\ngrade(student2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n\n```{.r .cell-code}\ngrade(student3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n\nLab Questions:\n\nQ1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adequately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade <- function (x){\n  x[is.na(x)] <- 0\n  mean(x[-which.min(x)])\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\ngrade(student2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n\n```{.r .cell-code}\ngrade(student3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n\nNow read the gradebook (CSV file):\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://tinyurl.com/gradeinput\"\ngradebook <- read.csv(url, row.names = 1)\n\nhead(gradebook)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          hw1 hw2 hw3 hw4 hw5\nstudent-1 100  73 100  88  79\nstudent-2  85  64  78  89  78\nstudent-3  83  69  77 100  77\nstudent-4  88  NA  73 100  76\nstudent-5  88 100  75  86  79\nstudent-6  89  78 100  89  77\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- apply(gradebook, 1 , grade)\nresults \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n student-1  student-2  student-3  student-4  student-5  student-6  student-7 \n     91.75      82.50      84.25      84.25      88.25      89.00      94.00 \n student-8  student-9 student-10 student-11 student-12 student-13 student-14 \n     93.75      87.75      79.00      86.00      91.75      92.25      87.75 \nstudent-15 student-16 student-17 student-18 student-19 student-20 \n     78.75      89.50      88.00      94.50      82.75      82.75 \n```\n:::\n:::\n\n\n\nQ2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 94.5\n```\n:::\n\n```{.r .cell-code}\nwhich.max(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstudent-18 \n        18 \n```\n:::\n:::\n\n\n\nA: The top scoring student is student 18 who get 94.5.\n\n\nQ3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(gradebook, 2, mean, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     hw1      hw2      hw3      hw4      hw5 \n89.00000 80.88889 80.80000 89.63158 83.42105 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.min(apply(gradebook, 2, mean, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhw3 \n  3 \n```\n:::\n:::\n\nTo prevent outlier, to sum up the column instead of using average:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.min(apply(gradebook, 2, sum, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhw2 \n  2 \n```\n:::\n:::\n\n\nA: hw2 is the toughest on students.\n\nQ4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make all (or mask) NA to zero\nmask <- gradebook\nmask[is.na(mask)] <- 0\n#mask\n```\n:::\n\nWe can use the `cor()` function for correlation analysis. \n\n::: {.cell}\n\n```{.r .cell-code}\ncor(mask$hw5, results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6325982\n```\n:::\n\n```{.r .cell-code}\ncor(mask$hw3, results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3042561\n```\n:::\n:::\n\n\nI need to use the `apply()` function to run this analysis over the whole course (i.e.masked gradebook)\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mask, 2, cor, results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      hw1       hw2       hw3       hw4       hw5 \n0.4250204 0.1767780 0.3042561 0.3810884 0.6325982 \n```\n:::\n:::\n\nA : hw5 was most predictive of overall score.\n",
    "supporting": [
      "Class06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}